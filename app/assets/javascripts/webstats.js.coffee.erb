startDate = moment().subtract(6, 'days')
endDate = moment().add(1, 'days')

ready = ->
	client = new Keen(
		projectId: '<%= Rails.application.secrets.keen_projectid %>',
		readKey: '<%= Rails.application.secrets.keen_readkey %>',
		protocol: 'https',
		host: 'api.keen.io/3.0',
		requestType: 'jsonp')

	d3.select(window).on('resize', refresh_graphs)

	if $('body.webstats.art').length
		query_and_draw client

#/---------------------------------------\
#|               Filters                 |
#\---------------------------------------/

	$('#daterange span').html(moment().subtract(7, 'days').format('D/MM/YYYY') + ' - ' + moment().format('D/MM/YYYY'));
	$('#daterange').daterangepicker {
			format: 'DD/MM/YYYY',
			startDate: moment().subtract(7, 'days').format('DD/MM/YYYY'),
			endDate: moment().format('DD/MM/YYYY'),
			minDate: '23/07/2014',
			maxDate: '31/12/2016',
			dateLimit: { years: 5 },
			showDropdowns: true,
			showWeekNumbers: false,
			timePicker: false,
			timePickerIncrement: 1,
			timePicker12Hour: true,
			ranges: {
				'Today': [moment(), moment()],
				'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
				'Last 7 Days': [moment().subtract(6, 'days'), moment()],
				'Last 30 Days': [moment().subtract(29, 'days'), moment()],
				'This Month': [moment().startOf('month'), moment().endOf('month')],
				'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
			},
			opens: 'left',
			drops: 'down',
			buttonClasses: ['btn', 'btn-sm'],
			applyClass: 'btn-primary',
			cancelClass: 'btn-default',
			separator: ' to ',
			locale: {
				applyLabel: 'Submit',
				cancelLabel: 'Cancel',
				fromLabel: 'From',
				toLabel: 'To',
				customRangeLabel: 'Custom',
				daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
				monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				firstDay: 1
			}
		},
		(start, end, label) ->
			return

	$('#daterange').on 'apply.daterangepicker', (ev, picker) ->
		$('#daterange span').html(picker.startDate.format('D/MM/YYYY') + ' - ' + picker.endDate.format('D/MM/YYYY'));

		startDate = picker.startDate
		endDate = picker.endDate.add(1, 'days')

		query_and_draw client
		return

	$('#version').change ->
		query_and_draw client

	$('.data-version').click ->
		$(this).toggleClass 'btn-default'
		$(this).toggleClass 'btn-success'

		if $(this).prop 'dataFilter'
			$(this).prop 'dataFilter', false
		else
			$(this).prop 'dataFilter', true

		query_and_draw client
		return

	$('.chart01').click ->
		if $('#chart01').attr('data-grouped') != $(this).attr('data-group')
			$('.chart01').addClass('btn-default').removeClass('btn-success')
			$(this).addClass('btn-success').removeClass('btn-default')
			$('#chart01').attr('data-grouped', $(this).attr('data-group'))
			run_query_art_group_count client, '#chart01', drawBarGraph
		return

	$('#stack_chart02').click ->
		if $('#chart02').attr 'data-stacked'
			$(this).addClass('btn-default').removeClass('btn-success')
			$('#chart02').removeAttr('data-stacked')
		else
			$(this).removeClass('btn-default').addClass('btn-success')
			$('#chart02').attr('data-stacked', 'true')
		run_query_art_daily_group_count client, '#chart02'
		return

	$('.chart02').click ->
		if $('#chart02').attr('data-grouped') == $(this).attr('data-group')
			$(this).addClass('btn-default').removeClass('btn-success')
			$('#chart02').removeAttr('data-grouped').removeAttr('data-stacked')
			$('#stack_chart02').addClass('disabled').addClass('btn-default').removeClass('btn-success')
		else
			$('.chart02').addClass('btn-default').removeClass('btn-success')
			$(this).addClass('btn-success').removeClass('btn-default')
			$('#chart02').attr('data-grouped', $(this).attr('data-group'))
			$('#stack_chart02').removeClass('disabled')
		run_query_art_daily_group_count client, '#chart02'
		return

	$('.chart03').click ->
		if $('#chart03').attr('data-grouped') != $(this).attr('data-group')
			$('.chart03').addClass('btn-default').removeClass('btn-success')
			$(this).addClass('btn-success').removeClass('btn-default')
			$('#chart03').attr('data-grouped', $(this).attr('data-group'))
			run_query_art_group_count client, '#chart03', drawPieGraph
		return
		
	return

#/---------------------------------------\
#|             Doc Stuff                 |
#\---------------------------------------/

$(document).ready ready
$(document).on 'page:load', ready

query_and_draw = (client) ->
	run_query_art_count client, '#chart04'
	run_query_art_group_count client, '#chart01', drawBarGraph
	run_query_art_group_count client, '#chart03', drawPieGraph
	run_query_art_daily_group_count client, '#chart02'

refresh_graphs = ->
	#Nothing... as of now
	return

#/---------------------------------------\
#|                Utils                  |
#\---------------------------------------/

build_query = ->
	the_query = {}

	the_versions = []
	$('.data-version').each( ->
		if $(this).prop 'dataFilter'
			the_versions.push $(this).val()
	)

	the_query['filters'] = []

	if the_versions.length > 0
		the_query['filters'].push {
			property_name: 'version'
			operator: 'in'
			property_value: the_versions}

	the_query['timeframe'] =
		{start: startDate.format('YYYY-MM-DD') + 'T00:00:00.000Z'
		end: endDate.format('YYYY-MM-DD') + 'T00:00:00.000Z'}

	return the_query

no_tests = (qq) ->
	the_q = qq
	the_q['filters'].push {
		property_name: 'test'
		operator: 'eq'
		property_value: false}
	return the_q

test_doest_exist = (qq) ->
	the_q = qq
	the_q['filters'].push {
		property_name: 'test'
		operator: 'exists'
		property_value: false}
	return the_q

#/---------------------------------------\
#|               QUERIES                 |
#\---------------------------------------/

run_query_art_count = (client, element) ->
	k_query1 = build_query()
	k_query2 = build_query()
	k_query1['eventCollection'] = 'artSeen'
	k_query2['eventCollection'] = 'artSeen'

	query_art_count1 = new (Keen.Query)('count', no_tests(k_query1))
	query_art_count2 = new (Keen.Query)('count', test_doest_exist(k_query2))

	#clocky thingy
	$(element).append '<div class="loady"><div class="arc1"></div></div>'

	client.run [query_art_count1, query_art_count2], (err, res) ->
		if err
		else
			#console.log res

			dataset = {total: 0, title: 'Total Pictures Unfolded Count'}

			i=0
			while i < res.length
				dataset['total'] += res[i]['result']
				i++

			drawTotalBlock element, dataset
		return

	return

run_query_art_group_count = (client, element, drawAsGraph) ->
	k_query1 = build_query()
	k_query2 = build_query()
	k_query1['eventCollection'] = 'artSeen'
	k_query2['eventCollection'] = 'artSeen'
	group = ''
	if $(element).attr 'data-grouped'
		k_query1['groupBy'] = $(element).attr 'data-grouped'
		k_query2['groupBy'] = $(element).attr 'data-grouped'
		group = $(element).attr 'data-grouped'

	query_art_count1 = new (Keen.Query)('count', no_tests(k_query1))
	query_art_count2 = new (Keen.Query)('count', test_doest_exist(k_query2))

	#clocky thingy
	$(element).append '<div class="loady"><div class="arc1"></div></div>'

	client.run [query_art_count1, query_art_count2], (err, res) ->
		if err
		else
			#console.log res

			dataset = []

			quack = res[0]['result']
			i=1
			j=0
			while i < res.length
				while j < res[i]['result'].length
					#group exists?
					l = 0
					found = false
					while l < quack.length
						if quack[l][group] == res[i]['result'][j][group]
							found = true
							break
						l++
					if found
						#exists join
						quack[l]['result'] += res[i]['result'][j]['result']
					else
						#new insert
						quack.splice quack.length, 0, res[i]['result'][j]

					j++
				i++

			i=0
			while i < quack.length
				dataset.push []
				dataset[i].push quack[i][group]
				dataset[i].push quack[i].result
				i++

			drawAsGraph element, dataset
		return

	return

run_query_art_daily_group_count = (client, element) ->
	k_query1 = build_query()
	k_query2 = build_query()
	k_query1['eventCollection'] = 'artSeen'
	k_query2['eventCollection'] = 'artSeen'
	group = ''
	if $(element).attr 'data-grouped'
		k_query1['groupBy'] = $(element).attr 'data-grouped'
		k_query2['groupBy'] = $(element).attr 'data-grouped'
		group = $(element).attr 'data-grouped'

	k_query1['interval'] = 'daily'
	k_query2['interval'] = 'daily'

	query_art_count1 = new (Keen.Query)('count', no_tests(k_query1))
	query_art_count2 = new (Keen.Query)('count', test_doest_exist(k_query2))

	#clocky thingy
	$(element).append '<div class="loady"><div class="arc1"></div></div>'

	client.run [query_art_count1, query_art_count2], (err, res) ->
		if err
		else
			#console.log res

			dataset = {
				xDataset: ['x']
				yDataset: []
				linesDataset: []
			}

			i=1
			j=0
			quack = res[0]['result']

			while i < res.length
				z=0
				while j < res[i]['result'].length
					#console.log 'i='+i+' j='+j+' z='+z
					#in case no z results
					if quack.length > 0
						if z < quack.length
							zdate = moment(quack[z]['timeframe']['start'], 'YYYY-MM-DD')
						ijdate = moment(res[i]['result'][j]['timeframe']['start'], 'YYYY-MM-DD')

						while moment(ijdate).isAfter(zdate) && z < quack.length
							z++
							if z < quack.length
								zdate = moment(quack[z]['timeframe']['start'], 'YYYY-MM-DD')

					#date exists?
					if quack.length > 0 && moment(ijdate).isSame(zdate)
						#join
						if group != ''
							#group exists?
							k = 0
							while k < res[i]['result'][j].value.length
								l = 0
								found = false
								while l < quack[z].value.length
									if quack[z].value[l][group] == res[i]['result'][j].value[k][group]
										found = true
										break
									l++
								if found
									#exists join
									quack[z].value[l]['result'] += res[i]['result'][j].value[k]['result']
								else
									#new insert
									quack[z].value.splice quack[z].value.length, 0, res[i]['result'][j].value[k]
								k++
						else
							quack[z].value += res[i]['result'][j].value
					else
						#insert
						quack.splice z,0, res[i]['result'][j]

					j++
				i++

			i=0
			while i < quack.length
				xdate = moment(quack[i]['timeframe']['start'])
				if moment().isAfter(xdate)
					dataset.xDataset.push xdate.add(1, 'days').format('YYYY-MM-DD')
					if group != ''
						j=0
						while j < quack[i].value.length
							if i==0
								dataset.yDataset.push []
								dataset.yDataset[j].push quack[i].value[j][group]
							dataset.yDataset[j].push quack[i].value[j].result
							j++
					else
						if i==0
							dataset.yDataset.push ['All']
						dataset.yDataset[0].push quack[i].value
				i++

			#Vertical Date Checkpoints
			dataset.linesDataset.push {value: '2015-05-14', text: 'TV Show Tuti'} #8PM, also 2015-05-15 12PM
			#dataset.linesDataset.push {value: '2015-05-14', text: 'End FB Ads'} #12:55... Too Crammed
			dataset.linesDataset.push {value: '2015-05-11', text: 'Start FB Ads'} #13:17
			dataset.linesDataset.push {value: '2014-10-22', text: 'v2.4.1'}
			#dataset.linesDataset.push {value: '2014-10-22', text: 'v2.4.0'} Negiglible...
			#dataset.linesDataset.push {value: '2014-10-21', text: 'v2.3.5'} Mess up fixed day after
			dataset.linesDataset.push {value: '2014-09-14', text: 'v2.3.1'}
			#dataset.linesDataset.push {value: '2014-09-14', text: 'v2.3.0'} Negiglible...
			dataset.linesDataset.push {value: '2014-07-24', text: 'v2.1.1'}
			#dataset.linesDataset.push {value: '2014-07-24', text: 'v2.1.0'} Negiglible
			#dataset.linesDataset.push {value: '2014-06-05', text: 'v1.1.0'} Stuck in flurry...
			#dataset.linesDataset.push {value: '2014-06-03', text: 'v1.0.14'} Stuck in flurry...

			draw1LineGraph element, dataset
		return

	return

#/---------------------------------------\
#|                GRAPHS                 |
#\---------------------------------------/

draw1LineGraph = (element, dataset) ->
	$(element).html('');

	chartColumns = []
	chartColumns.push dataset.xDataset
	chartGroups = []
	chartTypes = {}
	i = 0
	while i < dataset.yDataset.length
		chartColumns.push dataset.yDataset[i]
		chartGroups.push dataset.yDataset[i][0]
		chartTypes[dataset.yDataset[i][0]] = 'area' #'area-spline'
		i++

	chart_data = {
		x: 'x'
		columns: chartColumns
		types: chartTypes
	}
	if $(element).attr('data-stacked')
		chart_data['groups'] = [chartGroups]

	i=0
	chart_lines = []
	while i < dataset.linesDataset.length
		chart_lines.push {value: dataset.linesDataset[i]['value'], text: dataset.linesDataset[i]['text']}
		i++

	c3.generate({
		axis: {
			x: {
				label:
					position: 'outer-center'
					text: 'date'
				type: 'timeseries'
				tick: {
					format: '%d/%m/%Y'
				}
			}
			y: {
				label:
					position: 'outer-middle'
					text: 'unfolded count'
			}
		}
		bindto: element
		data: chart_data
		grid: {
			x: {
				lines: chart_lines
			}
		}
		size: {
			height: $(element).height()
			width: $(element).width()
		}
	})

	return

drawBarGraph = (element, dataset) ->
	$(element + ' > div.loady').remove()

	chartColumns = []
	chartColumnData = []
	chartColumnNames = []

	chartColumnNames.push 'x'
	chartColumnData.push 'data'

	i = 0
	while i < dataset.length
		chartColumnNames.push dataset[i][0]
		chartColumnData.push dataset[i][1]
		i++

	chartColumns.push chartColumnNames
	chartColumns.push chartColumnData

	c3.generate({
		axis: {
			x: {
				type: 'category'
			}
		}
		bar: {
			width: {
				ratio: 0.95
			}
		}
		bindto: element
		data: {
			x: 'x'
			columns: chartColumns
			groups: [['data']]
			type: 'bar'
		}
		legend: {
			show: false
		}
		size: {
			height: $(element).height()
			width: $(element).width()
		}
	})

	return

drawPieGraph = (element, dataset) ->
	$(element + ' > div.loady').remove()

	chartColumns = []
	i = 0
	while i < dataset.length
		chartColumns.push dataset[i]
		i++

	c3.generate({
		bindto: element
		data: {
			columns: chartColumns
			type: 'pie'
		}
		legend: {
			position: 'right'
		}
		size: {
			height: $(element).height()
			width: $(element).width()
		}
		tooltip:
			format:
				title: (d) ->
					return d
				value: (value, ratio, id) ->
					return value + ' - ' + Math.floor(ratio*100) + '%'
	})

	return

drawTotalBlock = (element, dataset) ->
	$(element + ' > div.loady').remove()

	$(element + ' > div > span.chart-count').html(dataset['total']);
	$(element + ' > div > span.chart-title').html(dataset['title']);

	return