# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

all_json = {}
hooverText = {}

ready = ->
	client = new Keen(
		projectId: '<%= Rails.application.secrets.keen_projectid %>',
		readKey: '<%= Rails.application.secrets.keen_readkey %>',
		protocol: 'https',
		host: 'api.keen.io/3.0',
		requestType: 'jsonp')

	d3.select(window).on('resize', resize_p)

	if $('body.webstats.art').length
		run_query_art_count client, '#chart01', 'barchart'

	$('#daterange span').html(moment().subtract(29, 'days').format('D/MMMM/YYYY') + ' - ' + moment().format('D/MMMM/YYYY'));
	$('#daterange').daterangepicker {
			format: 'DD/MM/YYYY',
			startDate: moment().subtract(29, 'days'),
			endDate: moment(),
			minDate: '01/01/2012',
			maxDate: '31/12/2015',
			dateLimit: { days: 60 },
			showDropdowns: true,
			showWeekNumbers: true,
			timePicker: false,
			timePickerIncrement: 1,
			timePicker12Hour: true,
			ranges: {
				'Today': [moment(), moment()],
				'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
				'Last 7 Days': [moment().subtract(6, 'days'), moment()],
				'Last 30 Days': [moment().subtract(29, 'days'), moment()],
				'This Month': [moment().startOf('month'), moment().endOf('month')],
				'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
			},
			opens: 'left',
			drops: 'down',
			buttonClasses: ['btn', 'btn-sm'],
			applyClass: 'btn-primary',
			cancelClass: 'btn-default',
			separator: ' to ',
			locale: {
				applyLabel: 'Submit',
				cancelLabel: 'Cancel',
				fromLabel: 'From',
				toLabel: 'To',
				customRangeLabel: 'Custom',
				daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr','Sa'],
				monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				firstDay: 1
			}
		},
		(start, end, label) ->
			$('#daterange span').html(start.format('D/MMMM/YYYY') + ' - ' + end.format('D/MMMM/YYYY'));

			$('.time-span').removeClass('btn-success')
			$('#daterange').removeClass('btn-default')
			$('.time-span').addClass('btn-default')
			$('#daterange').addClass('btn-success')

			$('#time_span').val ''
			$('#time_span').attr 'fromDate', start.toISOString()
			$('#time_span').attr 'toDate', end.toISOString()

			run_query_art_count client, '#chart01', 'barchart'
			return

	$('.time-span').click ->
		$('.time-span').removeClass('btn-success')
		$('#pick_date').removeClass('btn-success')
		$('.time-span').addClass('btn-default')
		$('#pick_date').addClass('btn-default')
		$(this).removeClass('btn-default')
		$(this).addClass('btn-success')

		$('#time_span').val $(this).attr('data-time')
		$('#time_span').attr 'fromDate', ''
		$('#time_span').attr 'toDate', ''

		run_query_art_count client, '#chart01', 'barchart'
		return

	return

$(document).ready ready
$(document).on 'page:load', ready

run_query_art_count = (client, element, type) ->
	if $('#time_span').val() && $('#time_span').val() != ''
		query_art_count = new (Keen.Query)('count',
			eventCollection: 'artSeen'
			groupBy: 'picName'
			timeframe: $('#time_span').val())
	else
		query_art_count = new (Keen.Query)('count',
			eventCollection: 'artSeen'
			groupBy: 'picName'
			start: $('#time_span').attr 'fromDate'
			end: $('#time_span').attr 'toDate')

	$(element).append '<div class="loady"><div class="arc1"></div></div>'

	client.run query_art_count, (err, res) ->
		if err
		else
			if all_json[element] == undefined
				all_json[element] = {}
				all_json[element]['data'] = {}
			else
				i = 0
				while i < Object.keys(all_json[element]['data']).length
					name = Object.keys(all_json[element]['data'])[i]
					all_json[element]['data'][name]['old'] = all_json[element]['data'][name]['new']
					all_json[element]['data'][name]['new'] = null
					i++

#			console.log all_json[element]

			i = 0
			while i < res.result.length
				if all_json[element]['data'][res.result[i]['picName']] == undefined
					all_json[element]['data'][res.result[i]['picName']] = {}
					all_json[element]['data'][res.result[i]['picName']]['old'] = 0
				all_json[element]['data'][res.result[i]['picName']]['new'] = res.result[i]['result']
				i++

#			console.log all_json[element]

			i = 0
			while i < Object.keys(all_json[element]['data']).length
				name = Object.keys(all_json[element]['data'])[i]
				if all_json[element]['data'][name]['old'] == 0 && all_json[element]['data'][name]['new'] == undefined
					all_json[element]['data'].splice i, 1
				else
					i++

#			console.log all_json[element]

#			all_json[element]['data'].sort (a, b) ->
#				console.log 'aa'
#				if (a.picName > b.picName)
#					return 1;
#				if (a.picName < b.picName)
#					return -1;
#				return 0

			all_json[element]['type'] = type

			drawBar element, false
		return

	return

resize_p = ->
	$('.chart').each ->
		if all_json['#'+$(this).attr('id')]
			if all_json['#'+$(this).attr('id')]['type'] == 'barchart'
				drawBar '#'+$(this).attr('id'), true
			else
				drawBar '#'+$(this).attr('id'), true
	return

drawBar = (element, resize) ->
	$(element).html('');
	dataset = $.map all_json[element]['data'],  (value, index) ->
		thing = value
		thing['name'] = index
		return [thing];
#	console.log dataset

	axis_YOffset = 10
	text_XOffset = 60
	text_YOffset = 5
	text_H = 25
	graph_H = $(element).height() - (axis_YOffset + text_H + 2*text_YOffset)
	graph_W = $(element).width() - (text_XOffset)
	graph_Offset = graph_W * 10 / 100
	allbars_W = (graph_W - graph_Offset)

	i = 0
	total = 0
	old_max = 0
	new_max = 0
	old_length = 0
	new_length = 0
	while i < dataset.length
		total += dataset[i].new
		if dataset[i].new > new_max
			new_max = dataset[i].new
		if dataset[i].old > old_max
			old_max = dataset[i].old
		if dataset[i].old > 0
			old_length++
		if dataset[i].new > 0
			new_length++
		i++

	if old_length == 0
		old_length = new_length
		
	if svgChart
		svgChart.remove()

	svgChart = d3.select(element)
	.append 'svg'
	.attr 'width', $(element).width()
	.attr 'height', $(element).height()

	scaleYCount = d3.scale.linear()
	.domain [0, new_max]
	.range [graph_H, 0]
	yAxisTicks = d3.svg.axis()
	.scale scaleYCount
	.orient "left"
	.ticks 5

	svgChart.append("g")
	.attr "class", "yaxis"
	.attr "transform", "translate("+(text_XOffset-1)+","+text_YOffset+")"
	.call yAxisTicks

	if resize
		svgChart.selectAll 'rect'
		.data dataset
		.enter()
		.append 'rect'
		.on 'mouseover', (d, i) ->
			hooverText = svgChart.append 'text'
			.text d.name + ' = ' + d.new
			.attr 'text-anchor', 'middle'
			.attr 'x', ->
				return $(element).width()/2
			.attr 'y', ->
				if new_max == 0
					new_h_ratio = 0
				else
					new_h_ratio = d.new / new_max
				return axis_YOffset + graph_H + text_YOffset + text_H
			.attr 'font-family', 'sans-serif'
			.attr 'font-size', text_H + 'px'

			d3.select this
			.transition()
			.duration 250
			.attr 'fill', ->
				if new_length <= 0
					v = 'rgb(165, 42, 42)'
				else
					v = d3.rgb(165,42,42).darker(3*((new_length-i)/new_length))
				return v
			return
		.on 'mouseout', (d, i) ->
			d3.select this
			.transition()
			.duration 350
			.attr 'fill', ->
				if new_length <= 0
					v = 'rgb(70,130,180)'
				else
					v = d3.rgb(70,130,180).darker(3*(i/new_length))
				return v
			hooverText.remove()
			return
		.attr 'x', (d, i) ->
			if new_length <= 1
				v = 0
			else
				v = graph_Offset / (new_length - 1)
			return (allbars_W/new_length + v) * i + text_XOffset
		.attr 'y', (d) ->
			if new_max == 0
				new_h_ratio = 0
			else
				new_h_ratio = d.new / new_max
			return graph_H - (new_h_ratio * graph_H) + axis_YOffset
		.attr 'width', (d) ->
			if new_length <= 0
				v = 0
			else
				v = allbars_W/new_length
			return v
		.attr 'height', (d) ->
			if new_max == 0
				new_h_ratio = 0
			else
				new_h_ratio = d.new / new_max
			return new_h_ratio * graph_H
		.attr 'fill', (d, i) ->
			if new_length <= 0
				v = 'rgb(70,130,180)'
			else
				v = d3.rgb(70,130,180).darker(3*(i/new_length))
			return v
	else
		svgChart.selectAll 'rect'
		.data dataset
		.enter()
		.append 'rect'
		.on 'mouseover', (d, i) ->
			hooverText = svgChart.append 'text'
			.text d.name + ' = ' + d.new
			.attr 'text-anchor', 'middle'
			.attr 'x', ->
				return $(element).width()/2
			.attr 'y', ->
				if new_max == 0
					new_h_ratio = 0
				else
					new_h_ratio = d.new / new_max
				return axis_YOffset + graph_H + text_YOffset + text_H
			.attr 'font-family', 'sans-serif'
			.attr 'font-size', text_H + 'px'

			d3.select this
			.transition()
			.duration 250
			.attr 'fill', ->
				if new_length <= 0
					v = 'rgb(165, 42, 42)'
				else
					v = d3.rgb(165,42,42).darker(3*((new_length-i)/new_length))
				return v
			return
		.on 'mouseout', (d, i) ->
			d3.select this
			.transition()
			.duration 350
			.attr 'fill', ->
				if new_length <= 0
					v = 'rgb(70,130,180)'
				else
					v = d3.rgb(70,130,180).darker(3*(i/new_length))
				return v
			hooverText.remove()
			return
		.transition()
		.duration 1000
		.each 'start', (d, i) ->
			d3.select this
			.attr 'x', ->
				if old_length <= 1
					v = 0
				else
					v = graph_Offset / (old_length - 1)
				return (allbars_W/old_length + v) * i + text_XOffset
			.attr 'y', ->
				if old_max == 0
					old_h_ratio = 0
				else
					old_h_ratio = d.old / old_max
				return graph_H - (old_h_ratio * graph_H) + axis_YOffset
			.attr 'width', ->
				if old_length <= 0
					v = 0
				else
					v = allbars_W/old_length
				return v
			.attr 'height', ->
				if old_max == 0
					old_h_ratio = 0
				else
					old_h_ratio = d.old / old_max
				return old_h_ratio * graph_H
			.attr 'fill', ->
				if old_length <= 0
					v = 'rgb(70,130,180)'
				else
					v = d3.rgb(70,130,180).darker(3*(i/old_length))
				return v
			return
		.attr 'x', (d, i) ->
			if new_length <= 1
				v = 0
			else
				v = graph_Offset / (new_length - 1)
			return (allbars_W/new_length + v) * i + text_XOffset
		.attr 'y', (d) ->
			if new_max == 0
				new_h_ratio = 0
			else
				new_h_ratio = d.new / new_max
			return graph_H - (new_h_ratio * graph_H) + axis_YOffset
		.attr 'width', (d) ->
			if new_length <= 0
				v = 0
			else
				v = allbars_W/new_length
			return v
		.attr 'height', (d) ->
			if new_max == 0
				new_h_ratio = 0
			else
				new_h_ratio = d.new / new_max
			return new_h_ratio * graph_H
		.attr 'fill', (d, i) ->
			if new_length <= 0
				v = 'rgb(70,130,180)'
			else
				v = d3.rgb(70,130,180).darker(3*(i/new_length))
			return v
	return